# Pull the latest version of all rules and reference lists from Google SecOps and commit them to the GitHub repo.

name: Pull Latest Content

on:
  workflow_dispatch:
    inputs:
     environment:
        type: environment
        description: Select the environmen
        default: default
#on:
  #schedule:
  # Run daily at 23:05 UTC time
  #- cron: "5 23 * * *"

permissions:
  contents: write

jobs:
  pull-latest-content:
    permissions:
      contents: 'read'
      id-token: 'write'
    
    runs-on: ubuntu-latest
    env:
      LOGGING_LEVEL: ${{ vars.LOGGING_LEVEL }}
      CHRONICLE_API_BASE_URL: ${{ vars.CHRONICLE_API_BASE_URL }}
      CHRONICLE_INSTANCE: ${{ vars.CHRONICLE_INSTANCE }}
      AUTHORIZATION_SCOPES: ${{ vars.AUTHORIZATION_SCOPES }}
      CHRONICLE_API_CREDENTIALS: ${{ secrets.CHRONICLE_API_CREDENTIALS }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"  # Caching pip dependencies
      - uses: 'google-github-actions/auth@v2'
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }} 
      - name: Install Python project dependencies
        working-directory: ./tools/rule_manager
        run: pip install -r requirements_dev.txt

      #- name: Check Python code formatting with black
        #working-directory: ./tools/rule_manager
        #run: python -m black chronicle_api rule_cli --line-length 120 --check
   
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2 
        
      - name: Testing Workload Identity Federation Config
        run: |
          gcloud auth print-identity-token
          gcloud projects list
          
      - name: Run tests using pytest
        working-directory: ./tools/rule_manager
        run: pytest -v

      - name: Pull latest version of all rules from Google SecOps
        working-directory: ./tools/rule_manager
        run: python -m rule_cli --pull-latest-rules

      - name: Pull latest version of all reference lists from Google SecOps
        working-directory: ./tools/rule_manager
        run: python -m rule_cli --pull-latest-reference-lists

      - name: Add files to git staging area
        run: git add rules config/rule_config.yaml reference_lists config/reference_list_config.yaml

      - name: Run git status command
        run: git status  # For debugging

      - name: Set the username and email to be associated with git commits
        run: |
          git config --global user.email ${{ secrets.GH_USER_EMAIL }}
          git config --global user.name ${{ secrets.GH_USER_NAME }}

      - name: Commit pending changes
        run: |
          # Check if there are uncommitted changes
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "latest content pulled from google secops api"
            git push origin main
          else
            echo "No changes to commit"
          fi


      - name: Show last git commit message
        run: git log -1  # For debugging
