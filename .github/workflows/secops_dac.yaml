#initial workflow
name: SecOps sync detection rules
on:
  workflow_dispatch:
    inputs:
     environment:
        type: environment
        description: Select the environmen
        default: default
jobs:
  pull-existing-detections:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    container: 
      image: python:3.10-slim
    steps:
      - run: apt-get update && apt-get -y install sudo
      #changing ownership of python cache
      - run: sudo chown -R $(whoami) /github/home
      - run: echo "Starting rule sync from SecOps instance..."
      - run: echo "Setting up Python environment."
      - run: pip install --upgrade pip
      - run: pip install virtualenv
      - run: python -m virtualenv venv
      - run: source venv/bin/activate
      - run: which python  # Check that the virtual environment is activated.
      - run: python --version ; pip --version
      # Install project requirements.
      - run: pwd

      # Setting up git environment.
      - run: echo "Installing git."
      - run: apt-get update -qy && apt-get upgrade -qy
      - run: apt-get install -y git
      - run: git --version
      - run: which python
        # Run tests
      #- run: pytest -v
        # Clone the repository via HTTPS inside a new directory. The new directory is named using the CI_COMMIT_SHA variable (the commit revision the project is built for).
      - run: echo 'Clonning repository ${GITHUB_REPOSITORY}'
      - run: git clone "https://github.com/${GITHUB_REPOSITORY}" "${CI_COMMIT_SHA}"
        # Go to the new directory.
      - run: cd "${CI_COMMIT_SHA}"
      - run: git branch
      - run: pip install -r requirements_dev.txt
        # Set the username and email to be associated with commits.
        #git config --global user.email "${GIT_USER_EMAIL:-$GITLAB_USER_EMAIL}"
        #git config --global user.name "${GIT_USER_NAME:-$GITLAB_USER_NAME}"
        # Pull the latest version of all rules from Chronicle
      - run: echo "Attempting to pull the latest version of all rules from Chronicle"
        #python -m rule_cli --pull-latest-rules
        # Add files to git staging area
        #git add rules rule_config.yaml
        # Check if there are any rule updates that need to be committed to the repo's main branch.
      - run: echo "Checking for updates to rules."
        #git status
        # Get a count of changes.
        #CHANGES=$(git status --porcelain | wc -l)
        # Commit and push changes if there are any. Skip the CI pipeline (ci.skip).
      - run: echo "There are $CHANGES changes to commit" && [ "$CHANGES" -gt "0" ] && git commit -m "latest rules pulled from chronicle api" && git push origin "${CI_DEFAULT_BRANCH}" -o ci.skip
      - run: echo "Current time is $(date)"
        # Show last commit message.
      - run: git log -1
